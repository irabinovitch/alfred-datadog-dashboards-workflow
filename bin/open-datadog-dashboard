#!/bin/bash

# TODO validate
source ~/.datadogrc

search_term="${1}"

# TODO make configurable and/or move to Alfred's workspace?
cache_path="/tmp/datadog-dashboards.json"

function sort_data {
  jq 'sort_by(.title)'
}

function select_data {
  jq 'map({id, title})'
}

function fetch_dashboards_from_datadog_api {
  local api_url="https://app.datadoghq.com/api/v1/dash?api_key=${DATADOG_API_KEY}&application_key=${DATADOG_APP_KEY}"
  curl -s "$api_url" | jq '.[]' | select_data | sort_data > $cache_path
  cat $cache_path
}

function fetch_cached_datadog_dashboards {
  if [ -w $cache_path ]; then
    local cache_age="$(expr $(date +%s) - $(stat -f '%m' $cache_path))"
    # TODO make configureable
    local max_age="300"
    if [ "${cache_age}" -gt "${max_age}" ]; then
      fetch_dashboards_from_datadog_api
    fi
  else
      fetch_dashboards_from_datadog_api
  fi
  cat $cache_path
}

function filter_results {
  grep -i "$search_term"
}

function columnize_data {
  # maps over each item in the array and returns data in 4 columns
  #
  # 1. id - the ID of the dashboard
  # 2. tokenized title (first letters split by spaces) - first letter of each word in the dashboard's title
  #                this provides an alternative way to match titles
  #                example: "My Awesome App" becomes "MAA"
  # 3. tokenized title (first letters split by hyphens) - first letter of each hypenated word in the dashboard's title
  #                this provides an alternative way to match titles
  #                example: "my-awesome-app" becomes "maa"
  # 4. title - the full dashboard title

  jq --raw-output 'map("\(.id) \(.title | split(" ") | map(explode[0]) | implode) \(.title | split("-") | map(explode[0]) | implode) \(.title)")[]' | column -c 4
}

function alfred_items {
  if [ "$search_term" == "" ]; then
    fetch_cached_datadog_dashboards | sort_data | columnize_data
  else
    fetch_cached_datadog_dashboards | sort_data | columnize_data | filter_results
  fi
}

function present_alfred_item {
  local id="$1"
  shift 3
  local title="$*"
  if [ "$1" != "" ]; then
    cat << EOS
  <item arg="$id" autocomplete="$title">
    <title>$title</title>
    <subtitle>Open the "$title" dashboard in Datadog...</subtitle>
    <subtitle mod="shift">Copy "https://app.datadoghq.com/dash/$title" to your clipboard...</subtitle>
    <text type="copy">https://app.datadoghq.com/dash/$id</text>
    <icon>datadog-logo.png</icon>
  </item>
EOS
  fi
}

function main {
  echo '<?xml version="1.0"?>'
  echo '<items>'

  while read -r item; do
    present_alfred_item $item
  done <<< "$(alfred_items)"

  echo '</items>'
}

main
